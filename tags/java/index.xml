<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on zhangtao&#39;s Blog</title>
    <link>https://zhangtaoblog.cn/tags/java/</link>
    <description>Recent content in java on zhangtao&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Oct 2023 10:56:17 +0000</lastBuildDate><atom:link href="https://zhangtaoblog.cn/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>注册中心ZK、nameServer、eureka、Nacos介绍与对比</title>
      <link>https://zhangtaoblog.cn/post/2023-10-31-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83zknameservereurekanacos%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AF%B9%E6%AF%94/</link>
      <pubDate>Tue, 31 Oct 2023 10:56:17 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2023-10-31-%E6%B3%A8%E5%86%8C%E4%B8%AD%E5%BF%83zknameservereurekanacos%E4%BB%8B%E7%BB%8D%E4%B8%8E%E5%AF%B9%E6%AF%94/</guid>
      <description>前言 注册中心的由来 微服务架构是存在着很多跨服务调用，每个服务都存在着多个节点，如果有多个提供者和消费者，当提供者增加/减少或者消费者增加/减</description>
    </item>
    
    <item>
      <title>记一次死锁问题</title>
      <link>https://zhangtaoblog.cn/post/2023-04-26-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</link>
      <pubDate>Wed, 26 Apr 2023 10:43:12 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2023-04-26-%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98/</guid>
      <description>最近在做一个需求，碰到了死锁的问题，记录下解决问题的过程 背景 这个需求要改动一个接口，我这边称为A接口，原先的逻辑是A接口内部会调用c方法，c</description>
    </item>
    
    <item>
      <title>记一次线上oom排查过程</title>
      <link>https://zhangtaoblog.cn/post/2023-04-25-%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8Aoom%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/</link>
      <pubDate>Tue, 25 Apr 2023 17:42:26 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2023-04-25-%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%BA%BF%E4%B8%8Aoom%E6%8E%92%E6%9F%A5%E8%BF%87%E7%A8%8B/</guid>
      <description>故障 线上pda服务器出现卡慢，由于pda服务器主要是只是做了网关路由的服务，于是我们猜测是某个下游服务出现了问题，通过elk查看慢请求发现基</description>
    </item>
    
    <item>
      <title>从位运算理解位图，位掩码</title>
      <link>https://zhangtaoblog.cn/post/2023-03-22-%E4%BB%8E%E4%BD%8D%E8%BF%90%E7%AE%97%E7%90%86%E8%A7%A3%E4%BD%8D%E5%9B%BE%E4%BD%8D%E6%8E%A9%E7%A0%81/</link>
      <pubDate>Wed, 22 Mar 2023 19:41:14 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2023-03-22-%E4%BB%8E%E4%BD%8D%E8%BF%90%E7%AE%97%E7%90%86%E8%A7%A3%E4%BD%8D%E5%9B%BE%E4%BD%8D%E6%8E%A9%E7%A0%81/</guid>
      <description>位图是一种较难理解的数据结构，想了解位图，我需要先温习一下基础，复习下一些二进制的知识 1个字节=8个二进制位 二进制每逢二进一，下面是二进制对</description>
    </item>
    
    <item>
      <title>设计模式之观察者模式</title>
      <link>https://zhangtaoblog.cn/post/2022-08-16-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</link>
      <pubDate>Tue, 16 Aug 2022 21:04:57 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2022-08-16-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/</guid>
      <description>观察者模式是我现在公司用的很广泛的一种设计模式，同时也十分好用，下面我推荐给大家 首先我们要明白为什么需要观察者模式，我们举个例子分析。比如我</description>
    </item>
    
    <item>
      <title>ThreadLocal原理与实战</title>
      <link>https://zhangtaoblog.cn/post/2022-06-08-threadlocal%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/</link>
      <pubDate>Wed, 08 Jun 2022 17:06:07 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2022-06-08-threadlocal%E5%8E%9F%E7%90%86%E4%B8%8E%E5%AE%9E%E6%88%98/</guid>
      <description>ThreadLocal我会将其解释为线程上下文变量，当我们想要在方法间传递参数，又不想很挫的将每个方法都参数列表都加上这个参数时，可以使用它</description>
    </item>
    
    <item>
      <title>公司open api对接遇到的问题解决</title>
      <link>https://zhangtaoblog.cn/post/2022-04-15-%E5%85%AC%E5%8F%B8open-api%E5%AF%B9%E6%8E%A5%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</link>
      <pubDate>Fri, 15 Apr 2022 14:59:33 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2022-04-15-%E5%85%AC%E5%8F%B8open-api%E5%AF%B9%E6%8E%A5%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</guid>
      <description>之前在写开放平台的接口的时候，碰到了一些问题，记录一下 由于工期很赶，所以还没来得及自己测试,接口匆匆忙忙上线，当客户在用时，发现查询接口使用</description>
    </item>
    
    <item>
      <title>用Java给女友自动提交工作内容的自动化脚本</title>
      <link>https://zhangtaoblog.cn/post/2022-02-06-%E7%94%A8java%E7%BB%99%E5%A5%B3%E5%8F%8B%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/</link>
      <pubDate>Sun, 06 Feb 2022 13:23:31 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2022-02-06-%E7%94%A8java%E7%BB%99%E5%A5%B3%E5%8F%8B%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AE%B9%E7%9A%84%E8%87%AA%E5%8A%A8%E5%8C%96%E8%84%9A%E6%9C%AC/</guid>
      <description>女朋友每天早上都需要登录某工作网站提交一项内容，其实在程序员看来，这些都是可以用代码自动化解决的，于是我开始加班加点搞了起来。 整理需求 首先她</description>
    </item>
    
    <item>
      <title>单元测试--Mockito&#43;JUnit</title>
      <link>https://zhangtaoblog.cn/post/2021-12-21-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95--mockito&#43;junit/</link>
      <pubDate>Tue, 21 Dec 2021 00:00:26 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2021-12-21-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95--mockito&#43;junit/</guid>
      <description>最近领导开始要求写代码需要写单元测试了。于是花了点时间研究下单元测试。 一、目的 单元测试适合一些项目复杂，启动一次项目要花很大成本的项目，这样</description>
    </item>
    
    <item>
      <title>捞取大量数据慢查询优化</title>
      <link>https://zhangtaoblog.cn/post/2021-11-07-%E6%8D%9E%E5%8F%96%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</link>
      <pubDate>Sun, 07 Nov 2021 16:56:59 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2021-11-07-%E6%8D%9E%E5%8F%96%E5%A4%A7%E9%87%8F%E6%95%B0%E6%8D%AE%E6%85%A2%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96/</guid>
      <description>双11期间这家客户积压了5w笔订单没有发货，所以客户反映每次计算都很慢，需要几十秒的时间。波次计算的代码需要把系统中审核的订单捞出来后进行计</description>
    </item>
    
    <item>
      <title>通过数据库唯一索引实现分布式锁</title>
      <link>https://zhangtaoblog.cn/post/2021-05-27-%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E5%BA%93%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link>
      <pubDate>Thu, 27 May 2021 11:06:14 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2021-05-27-%E9%80%9A%E8%BF%87%E6%95%B0%E6%8D%AE%E5%BA%93%E5%94%AF%E4%B8%80%E7%B4%A2%E5%BC%95%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid>
      <description>伪代码 // 需要加事务 @Transactional @Override public &amp;lt;T&amp;gt; T lock(XxxLock lock, ILockCallback&amp;lt;T&amp;gt; callback) { // 数据库加锁 lock(lock); // 加锁逻辑 T result = callback.callback(); //释放锁 try { lockDao.batchDelete(locks); } catch (Exception e) { logger.error(&amp;#34;mysq</description>
    </item>
    
    <item>
      <title>匿名内部类使用</title>
      <link>https://zhangtaoblog.cn/post/2020-08-04-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 04 Aug 2020 16:48:41 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-08-04-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E4%BD%BF%E7%94%A8/</guid>
      <description>在我们开发中，匿名内部类用的还是比较多的，笔者有点忘了一些细节，所以今天带大家复习一下匿名内部类 匿名内部类既没有名字的内部类 正因为没有名字，</description>
    </item>
    
    <item>
      <title>JVM相关知识点总结</title>
      <link>https://zhangtaoblog.cn/post/2020-08-03-jvm%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 03 Aug 2020 17:13:35 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-08-03-jvm%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
      <description>每个线程都有： 程序计数器：记录了上下文切换的位置 虚拟机栈：由栈帧组成，入栈出栈 本地方法栈：Native方法 每个线程共享： 堆：对象 方法区（jd</description>
    </item>
    
    <item>
      <title>SpringBoot之Starter</title>
      <link>https://zhangtaoblog.cn/post/2020-07-27-springboot%E4%B9%8Bstarter/</link>
      <pubDate>Mon, 27 Jul 2020 09:57:14 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-07-27-springboot%E4%B9%8Bstarter/</guid>
      <description>SpringBoot之所以流行，是因为Spring Starter模式的提出。Spring Starter的出现，可以让模块开发更加独立化，相互</description>
    </item>
    
    <item>
      <title>总结自己常用的JDK8写法（stream,function,optional）</title>
      <link>https://zhangtaoblog.cn/post/2020-07-27-%E6%80%BB%E7%BB%93%E8%87%AA%E5%B7%B1%E5%B8%B8%E7%94%A8%E7%9A%84jdk8%E5%86%99%E6%B3%95streamfunctionoptional/</link>
      <pubDate>Mon, 27 Jul 2020 09:56:44 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-07-27-%E6%80%BB%E7%BB%93%E8%87%AA%E5%B7%B1%E5%B8%B8%E7%94%A8%E7%9A%84jdk8%E5%86%99%E6%B3%95streamfunctionoptional/</guid>
      <description>特别要注意的是list集合，我们sql查询返回的list或者stream处理完的list都不可能是null，所以不需要判断是否为null 遍历</description>
    </item>
    
    <item>
      <title>高可用方案和一致性hash</title>
      <link>https://zhangtaoblog.cn/post/2020-07-27-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7hash/</link>
      <pubDate>Mon, 27 Jul 2020 09:56:16 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-07-27-%E9%AB%98%E5%8F%AF%E7%94%A8%E6%96%B9%E6%A1%88%E5%92%8C%E4%B8%80%E8%87%B4%E6%80%A7hash/</guid>
      <description>其实大部分中间件都逃不过这两种模式 这种模式的特点是有一Master多slave，一般采用读写分离的方式，只从master中写，然后同步给sl</description>
    </item>
    
    <item>
      <title>SPI机制应用</title>
      <link>https://zhangtaoblog.cn/post/2020-07-27-spi%E6%9C%BA%E5%88%B6%E5%BA%94%E7%94%A8/</link>
      <pubDate>Mon, 27 Jul 2020 09:55:42 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-07-27-spi%E6%9C%BA%E5%88%B6%E5%BA%94%E7%94%A8/</guid>
      <description>为什么要使用SPI? 系统设计的各个抽象，往往有很多不同的实现方案，在面向的对象的设计里，一般推荐模块之间基于接口编程，模块之间不对实现类进行</description>
    </item>
    
    <item>
      <title>拦截器、过滤器、AOP的区别</title>
      <link>https://zhangtaoblog.cn/post/2020-07-22-%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%87%E6%BB%A4%E5%99%A8aop%E7%9A%84%E5%8C%BA%E5%88%AB/</link>
      <pubDate>Wed, 22 Jul 2020 17:41:58 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-07-22-%E6%8B%A6%E6%88%AA%E5%99%A8%E8%BF%87%E6%BB%A4%E5%99%A8aop%E7%9A%84%E5%8C%BA%E5%88%AB/</guid>
      <description>spring中独有的 在SpringMVC的配置文件中配置 可对请求和响应处理 &amp;lt;mvc:interceptors&amp;gt; &amp;lt;mvc:interceptor&amp;gt; &amp;lt;mvc:mapping path=&amp;#34;/**&amp;#34; /&amp;gt; &amp;lt;bean class=&amp;#34;com.scorpios.atcrowdfunding.web.LoginInterceptor&amp;#34;&amp;gt;&amp;lt;/bean&amp;gt; &amp;lt;/mvc:interceptor&amp;gt; &amp;lt;/mvc:interceptors&amp;gt; 可以针对自定义的url拦截 servlet中有的 可</description>
    </item>
    
    <item>
      <title>简单介绍AQS、ReetrantLock、CountDownLatch、CyclicBarrier、Semaphore</title>
      <link>https://zhangtaoblog.cn/post/2020-07-04-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8Daqsreetrantlockcountdownlatchcyclicbarriersemaphore/</link>
      <pubDate>Sat, 04 Jul 2020 15:29:16 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-07-04-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8Daqsreetrantlockcountdownlatchcyclicbarriersemaphore/</guid>
      <description>AQS，既AbstractQueuedSynchronizer, 是JUC包实现同步的基础工具，是一个抽象类。 在AQS中，定义了一个volat</description>
    </item>
    
    <item>
      <title>项目集成swagger启动报错 Error creating bean with name webMvcRequestHandlerProvider</title>
      <link>https://zhangtaoblog.cn/post/2020-04-09-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90swagger%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99-error-creating-bean-with-name-webmvcrequesthandlerprovider/</link>
      <pubDate>Thu, 09 Apr 2020 22:34:11 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2020-04-09-%E9%A1%B9%E7%9B%AE%E9%9B%86%E6%88%90swagger%E5%90%AF%E5%8A%A8%E6%8A%A5%E9%94%99-error-creating-bean-with-name-webmvcrequesthandlerprovider/</guid>
      <description>最近项目集成了swagger以后启动一直报错 org.springframework.beans.factory.UnsatisfiedDependencyException: Error creating bean with name &amp;#39;webMvcRequestHandlerProvider&amp;#39; defined in URL [jar:file:/Users/jasonfeng/.m2/repository/io/springfox/springfox-spring-web/2.2.2/springfox-spring-web-2.2.2.jar!/springfox/documentation/spring/web/plugins/WebMvcRequestHandlerProvider.class]: Unsatisfied dependency expressed through constructor argument with index 0 of type [java.util.List]: : No qualifying bean of type [org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping] found for dependency [collection of org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping]: expected at least 1 bean which qualifies as autowire candidate for this</description>
    </item>
    
    <item>
      <title>Java并发编程（原子性、可见性、有序性、synchronized、CAS、volatile、ThreadLocal）笔记</title>
      <link>https://zhangtaoblog.cn/post/2019-07-14-java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8F%AF%E8%A7%81%E6%80%A7%E6%9C%89%E5%BA%8F%E6%80%A7synchronizedcasvolatilethreadlocal%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Sun, 14 Jul 2019 18:02:13 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2019-07-14-java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%8E%9F%E5%AD%90%E6%80%A7%E5%8F%AF%E8%A7%81%E6%80%A7%E6%9C%89%E5%BA%8F%E6%80%A7synchronizedcasvolatilethreadlocal%E7%AC%94%E8%AE%B0/</guid>
      <description>自己网上总结了一些多线程并发的一些文章，如有错误请指教！ 多线程的三大特性 一、原子性 原子是世界上的最小单位，具有不可分割性。比如 a=0；（a非</description>
    </item>
    
    <item>
      <title>PageHelper中遇到的ThreadLocal小坑</title>
      <link>https://zhangtaoblog.cn/post/2019-06-27-pagehelper%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84threadlocal%E5%B0%8F%E5%9D%91/</link>
      <pubDate>Thu, 27 Jun 2019 22:43:11 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2019-06-27-pagehelper%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84threadlocal%E5%B0%8F%E5%9D%91/</guid>
      <description>最近写代码刚好碰到ThreadLocal的小坑，顺便学习了一波ThreadLocal，拿出来分享一下 ThreadLocal什么时候会出现线程</description>
    </item>
    
    <item>
      <title>同一个类的不同方法,A方法没有@Transactional，B方法有@Transactional,A调用B方法，事务不起作用</title>
      <link>https://zhangtaoblog.cn/post/2019-05-21-%E5%90%8C%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%90%8C%E6%96%B9%E6%B3%95a%E6%96%B9%E6%B3%95%E6%B2%A1%E6%9C%89transactionalb%E6%96%B9%E6%B3%95%E6%9C%89transactionala%E8%B0%83%E7%94%A8b%E6%96%B9%E6%B3%95%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</link>
      <pubDate>Tue, 21 May 2019 16:09:36 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2019-05-21-%E5%90%8C%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84%E4%B8%8D%E5%90%8C%E6%96%B9%E6%B3%95a%E6%96%B9%E6%B3%95%E6%B2%A1%E6%9C%89transactionalb%E6%96%B9%E6%B3%95%E6%9C%89transactionala%E8%B0%83%E7%94%A8b%E6%96%B9%E6%B3%95%E4%BA%8B%E5%8A%A1%E4%B8%8D%E8%B5%B7%E4%BD%9C%E7%94%A8/</guid>
      <description>问题： 同一个类的不同方法,A方法没有@Transactional，B方法有@Transactional,A调用B方法，事务不起作用 原理解析：</description>
    </item>
    
    <item>
      <title>git中reset操作的三种模式（总结）</title>
      <link>https://zhangtaoblog.cn/post/2018-09-21-git%E4%B8%ADreset%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 21 Sep 2018 17:14:56 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2018-09-21-git%E4%B8%ADreset%E6%93%8D%E4%BD%9C%E7%9A%84%E4%B8%89%E7%A7%8D%E6%A8%A1%E5%BC%8F%E6%80%BB%E7%BB%93/</guid>
      <description>首先，git 本地提交，会经过三个步骤。 这三个步骤的流程不多做解释 工作区 &amp;ndash;&amp;gt; 暂存区 &amp;ndash;&amp;gt;版本库 然后 git reset –soft 可以把版本库上的</description>
    </item>
    
    <item>
      <title>spring中service调用service如何保持事务一致</title>
      <link>https://zhangtaoblog.cn/post/2018-05-31-spring%E4%B8%ADservice%E8%B0%83%E7%94%A8service%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8C%81%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4/</link>
      <pubDate>Thu, 31 May 2018 20:21:51 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2018-05-31-spring%E4%B8%ADservice%E8%B0%83%E7%94%A8service%E5%A6%82%E4%BD%95%E4%BF%9D%E6%8C%81%E4%BA%8B%E5%8A%A1%E4%B8%80%E8%87%B4/</guid>
      <description>在使用SPRING的事务控制时，事务一般都是加在SERVICE层的，这个时候如果一个SERVICE调用另一个SERVICE时如何保持事务一致</description>
    </item>
    
    <item>
      <title>Integer比较 ==与equals</title>
      <link>https://zhangtaoblog.cn/post/2018-04-20-integer%E6%AF%94%E8%BE%83-%E4%B8%8Eequals/</link>
      <pubDate>Fri, 20 Apr 2018 11:30:18 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2018-04-20-integer%E6%AF%94%E8%BE%83-%E4%B8%8Eequals/</guid>
      <description>class Test { public static void main(String[] args) { Integer i1 = new Integer(5); Integer i2 = new Integer(5); System.out.println(i1 == i2); //false (情况，即new的id，而不是=的id赋值) Integer i3 = 5; Integer i4 = 5; System.out.println(i3 == i4); //true } } 所以判断Integer</description>
    </item>
    
    <item>
      <title>git使用笔记</title>
      <link>https://zhangtaoblog.cn/post/2018-02-07-git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Wed, 07 Feb 2018 13:44:48 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2018-02-07-git%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</guid>
      <description>1.git整合idea 2.在IDEA中实战Git</description>
    </item>
    
    <item>
      <title>Spring AOP控制事务</title>
      <link>https://zhangtaoblog.cn/post/2017-12-23-spring-aop%E6%8E%A7%E5%88%B6%E4%BA%8B%E5%8A%A1/</link>
      <pubDate>Sat, 23 Dec 2017 09:25:11 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2017-12-23-spring-aop%E6%8E%A7%E5%88%B6%E4%BA%8B%E5%8A%A1/</guid>
      <description>一. spring事务管理的两种方式 1. 编程式事务 自己写事务处理的类，然后调用(较少使用) 2. 声明式事务 2.1 使用基于注解的AOP事务管理 @Trans</description>
    </item>
    
    <item>
      <title>从零开始搭建SSM</title>
      <link>https://zhangtaoblog.cn/post/2017-12-16-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAssm/</link>
      <pubDate>Sat, 16 Dec 2017 10:23:52 +0000</pubDate>
      
      <guid>https://zhangtaoblog.cn/post/2017-12-16-%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BAssm/</guid>
      <description>下面是我搭建框架时参考的文章以及自己的觉得重要的笔记,如果大家只是搭建框架,前三步就足够了. http://blog.csdn.net/gebitan505/article/details/44455235/ 2.配置事务管理 http://blog.csdn.net/zhshulin/article/details/38108159 3.log4j配置 http://blog.csdn.net/github_32658299/article/details/54288923 4.SS</description>
    </item>
    
  </channel>
</rss>
